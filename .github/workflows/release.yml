name: Release
on:
  push:
    branches:
      - main
concurrency:
  group: ${{ github.workflow }}

jobs:
  releases-metadata:
    name: Metadata for pending releases
    runs-on: ubuntu-latest
    permissions: 
      pull-requests: read
      contents: read
    outputs:
      pending_releases: ${{ steps.metadata.outputs.pending_releases }}
      pending_releases_count: ${{ steps.metadata.outputs.pending_releases_count }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Metadata
        id: metadata
        env:
          GH_TOKEN: ${{ github.token }}  
        run: |
          pending_releases=$(gh pr list --json title,number --state merged --label "release: pending")
          pending_releases_count=$(echo $pending_releases | jq '. | length')
          
          echo "pending_releases=$pending_releases" >>"$GITHUB_OUTPUT"
          echo "pending_releases_count=$pending_releases_count" >>"$GITHUB_OUTPUT"

  release:
    name: Create release
    runs-on: ubuntu-latest
    if: ${{ needs.releases-metadata.outputs.pending_releases_count > 0}}
    needs:
      - releases-metadata
    strategy:
      # max-parallel: 1
      matrix:
        release-pr: ${{ fromJson(needs.releases-metadata.outputs.pending_releases) }}
    permissions: 
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0      
      - name: Release metadata
        id: metadata
        env:
          GH_TOKEN: ${{ github.token }}  
        run: |
          set -Eeuo pipefail
          pr_number=${{ matrix.release-pr.number }}
          pr_info=$(gh pr view $pr_number --json title,labels,mergeCommit,state,number,body | jq 'select(.state=="MERGED" and (.labels[] | .name=="release: pending"))')
          [[ -z "$pr_info" ]] && { echo "Pull request $pr_number has invalid release state"; exit 1; }

          commit=$(echo $pr_info | jq -r .mergeCommit.oid)
          version=$(git show "$commit":charts/learnrelease/Chart.yaml | yq .version)
          version=${version#v}
          tag=v${version}
          release_body=$(echo $pr_info | jq -r .body)

          echo "commit=$commit" >>"$GITHUB_OUTPUT"
          echo "version=$version" >>"$GITHUB_OUTPUT"
          echo "tag=$tag" >>"$GITHUB_OUTPUT"
          echo "release_body="$release_body"" >>"$GITHUB_OUTPUT"
      - name: Print metadata
        run: |
          echo "commit: ${{ steps.metadata.outputs.commit }}"
          echo "version: ${{ steps.metadata.outputs.version }}"
          echo "tag: ${{ steps.metadata.outputs.tag }}"
          echo "release_body: ${{ steps.metadata.outputs.release_body }}"
      - uses: actions/checkout@v4
        with:
          ref: ${{ steps.metadata.outputs.commit }}
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/setup-buildx-action@v3
      - name: Container metadata
        id: container-metadata
        uses: docker/metadata-action@v5
        with:
          images: "${{ github.repository }}/learnrelease"
          tags: ${{ steps.metadata.outputs.version }}
      - name: Print container metadata
        run: |
          echo "tags: ${{ steps.container-metadata.outputs.tags }}"
          echo "labels: ${{ steps.container-metadata.outputs.labels }}"

      
