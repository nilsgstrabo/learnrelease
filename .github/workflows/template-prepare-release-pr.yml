name: Template - Prepare release pull requests
on:
  workflow_call:
    inputs:
      version-file-path:
        description: The path to the file where the new version is written to.
        required: false
        type: string
        default: version.txt
      pre-release-version-prefix:
        description: The prefix to use in identifier for calculating pre-release versions. For example, if this value is set to "rc" (default), the first pre-release version for version "1.5.0" will be "1.5.0-rc.1", then "1.5.0-rc.2", and so on.
        required: false
        type: string
        default: rc
      branch:
        description: The name of the branch to analyze commits for calculating next version. This is also used as the base branch when creating release pull requests. 
        required: false
        type: string
        default: main
      pre-release-pr-branch:
        description: The pull request branch name for pre-releases
        required: false
        type: string
        default: release/pre-release
      stable-release-pr-branch:
        description: The pull request branch name for stable releases
        required: false
        type: string
        default: release/stable-release
      changelog-path:
        description: The path to the changelog to update for stable release pull requests
        required: false
        type: string
        default: CHANGELOG.md
      cliff-config-path:
        description: The path to cliff.toml configuration file, used to configure the layout of the changelog. See https://git-cliff.org/docs/configuration/ for more information.
        type: string
        required: false
      extra-files:
        description: A space or newline separated list of files to update with new version number. For each file, the workflow will look for lines containing the text '# x-patch-semver', and replace anything that matches a semver version with the new version.
        type: string
        required: false

env:
  GIT_CLIFF_VERSION: v2.8.0 # v2.9.0 has a bug when using --unreleased
jobs:
    metadata:
      name: Metadata
      runs-on: ubuntu-latest
      permissions:
        contents: read
      outputs:
        next_stable_version: ${{ steps.ver.outputs.next_stable_version }}
        next_prerelease_version: ${{ steps.ver.outputs.next_prerelease_version }}
        next_stable_version_greater_than_latest: ${{ steps.ver.outputs.next_stable_version_greater_than_latest }}
        next_prerelease_version_greater_than_latest: ${{ steps.ver.outputs.next_prerelease_version_greater_than_latest }}
        latest_version: ${{ steps.ver.outputs.latest_version }}
        commits_since_latest_version: ${{ steps.ver.outputs.commits_since_latest_version }}
      steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0
        - uses: actions/setup-go@v5
          with:
              go-version-file: go.mod
        - name: Install git-semver
          run: |
            go install github.com/psanetra/git-semver/cli@v1.1.2
            mv $(which cli) $(dirname $(which cli))/git-semver
        - name: Build release and prerelease tag
          id: ver
          run: |
            next_prerelease_version=$(git-semver next --pre-release-tag ${{ inputs.pre-release-version-prefix }} --pre-release-counter)
            next_stable_version=$(git-semver next)
            latest_version=$(git-semver latest --include-pre-releases)

            if git show-ref --quiet --verify refs/tags/v${latest_version}; then
                echo "Counting commits since v${latest_version}"
                commits_since_latest_version=$(git log  --oneline v${latest_version}..HEAD | wc -l)
            else
                echo "Counting all commits"
                commits_since_latest_version=$(git log --oneline | wc -l)
            fi

            next_stable_version_greater_than_latest="false"
            if [ "$(git-semver compare $next_stable_version $latest_version 2>&1)" = ">" ]; then
                next_stable_version_greater_than_latest="true"
            fi

            next_prerelease_version_greater_than_latest="false"
            if [ "$(git-semver compare $next_prerelease_version $latest_version 2>&1)" = ">" ]; then
                next_prerelease_version_greater_than_latest="true"
            fi

            echo "next_prerelease_version=$next_prerelease_version" >>"$GITHUB_OUTPUT"
            echo "next_stable_version=$next_stable_version" >>"$GITHUB_OUTPUT"
            echo "next_stable_version_greater_than_latest=$next_stable_version_greater_than_latest" >>"$GITHUB_OUTPUT"
            echo "next_prerelease_version_greater_than_latest=$next_prerelease_version_greater_than_latest" >>"$GITHUB_OUTPUT"
            echo "commits_since_latest_version=$commits_since_latest_version" >>"$GITHUB_OUTPUT"
        - name: Show computed version
          run: |
            echo "next_prerelease_version = ${{ steps.ver.outputs.next_prerelease_version }}"
            echo "next_stable_version = ${{ steps.ver.outputs.next_stable_version }}"
            echo "next_stable_version_greater_than_latest = ${{ steps.ver.outputs.next_stable_version_greater_than_latest }}"
            echo "next_prerelease_version_greater_than_latest = ${{ steps.ver.outputs.next_prerelease_version_greater_than_latest }}"
            echo "commits_since_latest_version = ${{ steps.ver.outputs.commits_since_latest_version }}"        

    stable-release-pr:
      name: Stable release PR
      runs-on: ubuntu-latest
      needs: metadata
      permissions: 
        pull-requests: write
        contents: write
        issues: write
      env:
        PRERELEASE_REGEX: ^v[0-9]+\.[0-9]+\.[0-9]+-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*
      steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0
            ref: ${{ inputs.branch }}
        - name: Generate stable release changelog
          if: needs.metadata.outputs.next_stable_version_greater_than_latest == 'true'
          uses: orhun/git-cliff-action@v4
          with:
            version: ${{ env.GIT_CLIFF_VERSION }}
            config: ${{ inputs.cliff-config-path }}
            args:
              --tag v${{ needs.metadata.outputs.next_stable_version }} --ignore-tags "${{ env.PRERELEASE_REGEX }}" -vv 
          env:
            OUTPUT: ${{ inputs.changelog-path }}

        - name: Generate stable release changelog for PR body
          if: needs.metadata.outputs.next_stable_version_greater_than_latest == 'true'  
          id: stable-changelog
          uses: orhun/git-cliff-action@v4
          with:
            version: ${{ env.GIT_CLIFF_VERSION }}
            config: ${{ inputs.cliff-config-path }}
            args:
              --tag v${{ needs.metadata.outputs.next_stable_version }} --ignore-tags "${{ env.PRERELEASE_REGEX }}" --unreleased --strip all -vv
          env:
            OUTPUT: ${{ runner.temp }}/stablechangelog.md

        - name: Update version tracking file
          if: needs.metadata.outputs.next_stable_version_greater_than_latest == 'true'
          run: |
            echo -n "${{ needs.metadata.outputs.next_stable_version }}" > ${{ inputs.version-file-path }}
        - name: Update extra files
          if: inputs.extra-files != '' && needs.metadata.outputs.next_stable_version_greater_than_latest == 'true'
          run: |
            ./scripts/patch-semver.sh "${{ needs.metadata.outputs.next_stable_version }}" "${{ inputs.extra-files }}"
        - name: Create stable release PR
          uses: peter-evans/create-pull-request@v7
          with:
            base: ${{ inputs.branch }}
            delete-branch: true
            title: "chore: release ${{ needs.metadata.outputs.next_stable_version }}"
            branch: ${{ inputs.stable-release-pr-branch }}
            labels: "release: pending"
            body: ${{ steps.stable-changelog.outputs.content }}
            commit-message: "chore(release): prepare for stable release ${{ needs.metadata.outputs.next_stable_version }}"
            sign-commits: true
            add-paths: |
              ${{ inputs.changelog-path }}
              ${{ inputs.version-file-path }}
              ${{ inputs.extra-files }}

    prerelease-pr:
      name: Prerelease PR
      runs-on: ubuntu-latest
      needs: metadata
      permissions: 
        pull-requests: write
        contents: write
        issues: write
      steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0
            ref: ${{ inputs.branch }}
        - name: Generate prerelease changelog for PR body
          if: needs.metadata.outputs.next_prerelease_version_greater_than_latest == 'true' && needs.metadata.outputs.commits_since_latest_version > 0
          id: unreleased-changelog
          uses: orhun/git-cliff-action@v4
          with:
            version: ${{ env.GIT_CLIFF_VERSION }}
            config: ${{ inputs.cliff-config-path }}
            args:
              --tag v${{ needs.metadata.outputs.next_prerelease_version }} --unreleased --strip all -vv
          env:
            OUTPUT: ${{ runner.temp }}/prereleasechangelog.md
        - name: Update version tracking file
          if: needs.metadata.outputs.next_prerelease_version_greater_than_latest == 'true' && needs.metadata.outputs.commits_since_latest_version > 0
          run: |
            echo -n "${{ needs.metadata.outputs.next_prerelease_version }}" > ${{ inputs.version-file-path }}
        - name: Update extra files
          if: inputs.extra-files != '' && needs.metadata.outputs.next_stable_version_greater_than_latest == 'true' && needs.metadata.outputs.commits_since_latest_version > 0
          run: |
            ./scripts/patch-semver.sh "${{ needs.metadata.outputs.next_prerelease_version }}" "${{ inputs.extra-files }}"            
        - name: Create prerelease PR
          uses: peter-evans/create-pull-request@v7
          with:
            base: ${{ inputs.branch }}
            delete-branch: true
            title: "chore: prerelease ${{ needs.metadata.outputs.next_prerelease_version }}"
            branch: ${{ inputs.pre-release-pr-branch }}
            labels: "release: pending"
            body: ${{ steps.unreleased-changelog.outputs.content }}
            commit-message: "chore(release): prepare for prerelease ${{ needs.metadata.outputs.next_prerelease_version }}"
            sign-commits: true
            add-paths: |
              ${{ inputs.version-file-path }}
              ${{ inputs.extra-files }}
