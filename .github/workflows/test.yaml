name: Test tags
on:
  workflow_dispatch:
    inputs:
      version:
        description: version
        type: string
      use-latest:
        description: use latest
        type: boolean
        
jobs:
  metadata:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      version: ${{ steps.metadata.outputs.version }}
      release-exist: ${{ steps.metadata.outputs.release_exist }}
      is-stable-release: ${{ steps.metadata.outputs.is_stable_release }}
    steps:
      - uses: actions/checkout@v4
      - name: Metadata
        id: metadata
        env:
          tag: ${{ inputs.version }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -Eeuo pipefail

          version=${tag#v}
          release_exist="true"

          if ! gh release view v${version} 1> /dev/null ; then
            release_exist="false"
          fi

          is_stable_release="false"
          if [[ "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]$ ]]; then
              is_stable_release="true"
          fi

          echo "version="$version"" >>"$GITHUB_OUTPUT"
          echo "release_exist="$release_exist"" >>"$GITHUB_OUTPUT"
          echo "is_stable_release="$is_stable_release"" >>"$GITHUB_OUTPUT"
  deploy-docker:
    runs-on: ubuntu-latest
    needs: metadata
    permissions:
      contents: read
      packages: write
    env:
      CONTAINER_REGISTRY: ghcr.io
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/setup-buildx-action@v3
      - name: Container metadata
        id: container-metadata
        uses: docker/metadata-action@v5
        with:
          images: "${{ env.CONTAINER_REGISTRY }}/nilsgstrabo/learnrelease"
          tags: |
             ${{ inputs.version }}
             type=raw,value=latest,enable=${{ needs.metadata.outputs.is-stable-release }}
      - name: Print container metadata
        run: |
          echo "tags: ${{ steps.container-metadata.outputs.tags }}"
          echo "labels: ${{ steps.container-metadata.outputs.labels }}"