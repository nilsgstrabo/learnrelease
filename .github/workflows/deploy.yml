name: Build and deploy Docker and Helm
on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+' # semver stable
      - 'v[0-9]+.[0-9]+.[0-9]+-*' # semver with prerelease suffix
  workflow_dispatch:
    inputs:
      tag:
        description: Tag to deploy
        type: string
        required: true
jobs:
  metadata:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.metadata.outputs.version }}
      release-exist: ${{ steps.metadata.outputs.release_exist }}
    steps:
      - name: Resolve tag
        id: resolve-tag
        run: |
          set -Eeuo pipefail

          tag=${{ github.ref_name }}

          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            tag=${{ inputs.tag }}
          fi

          echo "tag="$tag"" >>"$GITHUB_OUTPUT"
      - uses: actions/checkout@v4
      - name: Metadata
        id: metadata
        env:
          tag: ${{ steps.resolve-tag.outputs.tag }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          version=${tag#v}

          release_exist="true"
          if ! gh release view v${version} 1> /dev/null ; then
            release_exist="false"
          fi

          echo "version="$version"" >>"$GITHUB_OUTPUT"
          echo "release_exist="$release_exist"" >>"$GITHUB_OUTPUT"
  deploy-docker:
    runs-on: ubuntu-latest
    needs: metadata
    permissions:
      contents: read
      packages: write
    env:
      CONTAINER_REGISTRY: ghcr.io
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/setup-buildx-action@v3
      - name: Container metadata
        id: container-metadata
        uses: docker/metadata-action@v5
        with:
          images: "${{ env.CONTAINER_REGISTRY }}/${{ github.repository }}"
          tags: ${{ needs.metadata.outputs.version }}
      - name: Print container metadata
        run: |
          echo "tags: ${{ steps.container-metadata.outputs.tags }}"
          echo "labels: ${{ steps.container-metadata.outputs.labels }}"
      - name: Build and push container image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: |
            linux/amd64
            linux/arm64
          tags: ${{ steps.container-metadata.outputs.tags }}
          labels: ${{ steps.container-metadata.outputs.labels }}
  deploy-helm:
    runs-on: ubuntu-latest
    needs: metadata
    permissions:
      contents: read
      packages: write
      pull-requests: write
    env:
      HELM_CHART_REGISTRY: oci://ghcr.io
    steps:
      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.18.3
      - name: Helm login
        run: |
          helm registry login ${{env.HELM_CHART_REGISTRY }} \
            --username ${{ github.actor }} \
            --password ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v4
      - name: Helm package and push
        id: deploy-helm
        working-directory: charts/learnrelease
        run: |
          version=${{ needs.metadata.outputs.version }}
          helm package --version $version --app-version $version .
          
          helm_packages=$(git status --short | sed s/^...//)
          helm_repo=${{ env.HELM_CHART_REGISTRY }}/${{ github.repository }}/charts
          helm push learnrelease-$version.tgz $helm_repo
          
          echo "helm_packages="$helm_packages"" >>"$GITHUB_OUTPUT"
      - name: Create app token
        id: app-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.GH_APP_ID }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}
          # permission-workflows: write
          permission-contents: write  
      - name: Upload Helm packages to release
        if: needs.metadata.outputs.release-exist == 'true'
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        working-directory: charts/learnrelease
        run: |
          gh release upload --clobber "v${{ needs.metadata.outputs.version }}" ${{ steps.deploy-helm.outputs.helm_packages }}

