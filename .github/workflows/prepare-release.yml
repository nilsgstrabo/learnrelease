name: Prepare release PR

on:
    push: 
        # tags:
        #     - '**'
        branches: 
            - main
    workflow_dispatch:

env:
    PRERELEASE_SUFFIX: rc

jobs:
    metadata:
      name: Metadata
      runs-on: ubuntu-latest
      permissions:
        contents: read
      outputs:
        next_prerelease_tag: ${{ steps.ver.outputs.next_prerelease_tag }}
        next_stable_tag: ${{ steps.ver.outputs.next_stable_tag }}
        latest_tag: ${{ steps.ver.outputs.latest_tag }}
        commits_since_latest_tag: ${{ steps.ver.outputs.commits_since_latest_tag }}
      steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0
        - uses: actions/setup-go@v5
          with:
              go-version-file: go.mod
        - name: Install git-semver
          run: |
            go install github.com/psanetra/git-semver/cli@v1.1.2
            # mv $(which cli) $(dirname $(which cli))/git-semver
        - name: Build release and prerelease tag
          id: ver
          run: |
            next_prerelease_tag=v$(cli next --pre-release-tag $PRERELEASE_SUFFIX --pre-release-counter)
            next_stable_tag=v$(cli next)
            latest_tag=v$(cli latest --include-pre-releases)

            if git show-ref --quiet --verify "refs/tags/${latest_tag}"; then
                echo "Counting commits since ${latest_tag}"
                commits_since_latest_tag=$(git log  --oneline ${latest_tag}..HEAD | wc -l)
            else
                echo "Counting all commits"
                commits_since_latest_tag=$(git log --oneline | wc -l)
            fi

            echo "next_prerelease_tag=$next_prerelease_tag" >>"$GITHUB_OUTPUT"
            echo "next_stable_tag=$next_stable_tag" >>"$GITHUB_OUTPUT"
            echo "latest_tag=$latest_tag" >>"$GITHUB_OUTPUT"
            echo "commits_since_latest_tag=$commits_since_latest_tag" >>"$GITHUB_OUTPUT"
        - name: Show computed version
          run: |
            echo "next_prerelease_tag = ${{ steps.ver.outputs.next_prerelease_tag }}"
            echo "next_stable_tag = ${{ steps.ver.outputs.next_stable_tag }}"
            echo "latest_tag = ${{ steps.ver.outputs.latest_tag }}"
            echo "commits_since_latest_tag = ${{ steps.ver.outputs.commits_since_latest_tag }}"        

    stable-release-pr:
      name: Stable release PR
      runs-on: ubuntu-latest
      needs: metadata
      permissions: 
        pull-requests: write
        contents: write
        issues: write
      steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0
        - run: git checkout HEAD^
        - name: Generate stable release changelog
          uses: orhun/git-cliff-action@v4
          with:
            config: cliff.toml
            args:
              -vv --tag ${{ needs.metadata.outputs.next_stable_tag }} --ignore-tags ${{ env.PRERELEASE_SUFFIX }}
          env:
            OUTPUT: CHANGELOG.md

        - name: Generate stable release changelog for PR body
          id: stable-changelog
          uses: orhun/git-cliff-action@v4
          with:
            config: cliff.toml
            args:
              -vv -u --strip all --tag ${{ needs.metadata.outputs.next_stable_tag }} --ignore-tags ${{ env.PRERELEASE_SUFFIX }}
          env:
            OUTPUT: ${{ runner.temp }}/stablechangelog.md

        - name: Update stable version in Chart.yaml
          env:
            tag: ${{ needs.metadata.outputs.next_stable_tag }}
          run: >
            yq
            '.version = (strenv(tag) | sub("^v";"")), .appVersion = (strenv(tag) | sub("^v";""))'
            -i charts/learnrelease/Chart.yaml
            
        - name: Create stable release PR
          uses: peter-evans/create-pull-request@v7
          with:
            delete-branch: true
            title: "chore: release ${{ needs.metadata.outputs.next_stable_tag }}"
            branch: release/stable
            labels: "release: pending"
            body: ${{ steps.stable-changelog.outputs.content }}
            commit-message: "chore(release): prepare for stable release ${{ needs.metadata.outputs.next_stable_tag }}"
            sign-commits: true
            add-paths: |
              CHANGELOG.md
              charts/learnrelease/Chart.yaml                

    prerelease-pr:
      name: Prerelease PR
      runs-on: ubuntu-latest
      needs: metadata
      permissions: 
        pull-requests: write
        contents: write
        issues: write
      steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0
        - run: git checkout HEAD^
        - name: Generate prerelease changelog for PR body
          id: unreleased-changelog
          uses: orhun/git-cliff-action@v4
          with:
            config: cliff.toml
            args:
              -vv -u --strip all --tag ${{ needs.metadata.outputs.next_prerelease_tag }}
          env:
            OUTPUT: ${{ runner.temp }}/prereleasechangelog.md                
        - name: Update prerelease version in Chart.yaml
          if: needs.metadata.outputs.commits_since_latest_tag > 0
          env:
            tag: ${{ needs.metadata.outputs.next_prerelease_tag }}
          run: >
            yq
            '.version = (strenv(tag) | sub("^v";"")), .appVersion = (strenv(tag) | sub("^v";""))'
            -i charts/learnrelease/Chart.yaml
        - name: Create prerelease PR
          uses: peter-evans/create-pull-request@v7
          with:
            delete-branch: true
            title: "chore: prerelease ${{ needs.metadata.outputs.next_prerelease_tag }}"
            branch: release/prerelease
            labels: "release: pending"
            body: ${{ steps.unreleased-changelog.outputs.content }}
            commit-message: "chore(release): prepare for prerelease ${{ needs.metadata.outputs.next_prerelease_tag }}"
            sign-commits: true
            add-paths: |
              CHANGELOG.md
              charts/learnrelease/Chart.yaml            
